import com.sun.org.apache.xpath.internal.SourceTree;
import org.junit.Test;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.stream.IntStream;

import static org.junit.Assert.*;

public class GerrymanderEasyTest {

    @Test(timeout = 2000)
    public void test0() {
        int[] A = new int[]{5, 1, 2, 7};
        int[] B = new int[]{4, 0, 2, 2};
        int K = 2;
        assertEquals(0.75, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }

    @Test(timeout = 2000)
    public void test1() {
        int[] A = new int[]{12, 34, 56, 78, 90};
        int[] B = new int[]{1, 1, 1, 1, 1};
        int K = 1;
        assertEquals(0.08333333333333333, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }

    @Test(timeout = 2000)
    public void test2() {
        int[] A = new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000};
        int[] B = new int[]{3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
        int K = 5;
        assertEquals(5.4E-4, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }

    @Test(timeout = 2000)
    public void test3() {
        int[] A = new int[]{123, 4, 46, 88, 22, 34, 564, 87, 56, 311, 886};
        int[] B = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        int K = 1;
        assertEquals(0.0, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }

    @Test(timeout = 2000)
    public void test4() {
        int[] A = new int[]{1};
        int[] B = new int[]{1};
        int K = 1;
        assertEquals(1.0, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }

    @Test(timeout = 2000)
    public void test5() {
        int[] A = new int[]{10000};
        int[] B = new int[]{1432};
        int K = 1;
        assertEquals(0.1432, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }

    @Test(timeout = 2000)
    public void test6() {
        int[] A = new int[]{7449, 4255, 1264, 5885, 2648, 1780, 4601, 3138, 824, 9621, 4612, 6956, 5139, 3646, 220, 7710, 6778, 144, 7709, 2293, 4277, 1750, 3, 7153, 1014, 6272, 5875, 3672, 9105, 9702, 2187, 392, 4201, 4423, 1216, 65, 7958, 4872, 9414, 2983, 5878, 1686, 2351, 6559, 5871, 855, 4410, 5606, 2211, 7375, 7792, 8459, 6067, 2978, 3984, 9572, 3716, 734, 3492, 8259, 7222, 3545, 4684, 5319, 9174, 1586, 3441, 485, 5028, 2762, 1029, 2007, 8616, 1174, 4015, 7632, 7355, 8613, 8933, 7413, 9140, 4380, 1113, 5758, 819, 8402, 8048, 6036, 4188, 2326, 7994, 60, 4934, 5854, 2408, 9408, 2253, 2094, 8691, 8270, 1034, 7936, 2824, 2277, 4162, 419, 5316, 4650, 1780, 8933, 803, 8589, 5936, 8757, 5606, 8223, 235, 847, 3405, 4176, 8794, 6421, 849, 1799, 3188, 3647, 9298, 4168, 7421, 3740, 174, 9300, 8117, 7606, 657, 365, 4535, 6601, 4418, 2262, 4657, 701, 6430, 3200, 5605, 8789, 3328, 461, 1197, 2835, 5483, 1754, 4649, 9902, 1905, 6341, 4437, 2551, 8023, 7985, 9682, 9720, 9373, 3602, 8791, 3444, 370, 8675, 5780, 6209, 2586, 9086, 4323, 1212, 79, 6088, 8003, 8576, 5622, 5383, 1917, 8794, 8671, 5161, 8282, 7876, 7913, 6864, 3552, 2229, 2049, 4888, 7258, 9790, 1091, 4606, 8090, 5006, 8490, 8386, 4768, 2937, 6106, 7624, 6360, 7337, 8889, 8235, 6452, 9733, 9667, 4889, 8536, 3516, 5770, 1298, 2088, 887, 6391, 391, 8170, 4553, 7297, 9256, 9802, 3201, 3891, 1235, 1595, 6601, 8875, 2589, 2287, 4026, 2354, 3392, 7869, 5276, 6421, 4082, 1500, 7086, 4796, 620, 4852, 2996, 3140, 6396, 4670, 4446, 7799, 3995, 2180, 448, 744, 9197, 927, 464, 946, 1327, 1772, 6020, 986, 9920, 1481, 1080, 1735, 2127, 3048, 8359, 4625, 497, 8474, 599, 1992, 8554, 3540, 9801, 531, 5707, 9661, 129, 939, 501, 5611, 729, 5059, 5488, 195, 5153, 8981, 4857, 7699, 7616, 4056, 1423, 344, 3760, 4450, 5129, 2101, 9471, 9066, 9593, 5890, 467, 8593, 7453, 4158, 1725, 1491, 5088, 4206, 232, 4690, 6457, 9339, 4891, 5751, 4968, 9197, 7292, 1945, 5817, 234, 5959, 9863, 3067, 6320, 9233, 7403, 2919, 1978, 2782, 7194, 3890, 3948, 2972, 8850, 5048, 8342, 3966, 2680, 7615, 2400, 8761, 2267, 1528, 6772, 95, 2018, 9042, 7996, 616, 7098, 5975, 3852, 6975, 447, 9218, 6380, 8267, 5080, 3002, 1998, 4053, 1238, 5651, 3871, 5332, 8015, 69, 8198, 4492, 9879, 514, 9220, 2530, 7913, 5804, 7537, 499, 9690, 1287, 4110, 9544, 3796, 7500, 6205, 8076, 9734, 7205, 1262, 3364, 2862, 6923, 452, 2062, 4443, 5163, 489, 1686, 2204, 8875, 6519, 3057, 297, 1279, 5512, 2538, 2537, 6390, 761, 9221, 1178, 9799, 7819, 6998, 5481, 3139, 8736, 7063, 3904, 9041, 1393, 1277, 475, 5327, 5735, 9365, 148, 5644, 1893, 6877, 4364, 2269, 9091, 1617, 2797, 2054, 861, 4958, 2278, 9559, 4366, 4795, 4539, 9131, 914, 928, 8012, 1852, 8047, 3949, 7583, 1127, 7172, 8109, 8679, 9274, 2706, 4616, 4643, 723, 3191, 6919, 7285, 8251, 2945, 6270, 5611, 9198, 2903, 6354, 5461, 1343, 892, 2057, 4158, 7637, 690, 9027, 4459, 1658, 5402, 8241, 9013, 5568, 1549, 3214, 9424, 4433, 1376, 1037, 4572, 3098, 9655, 142, 4522, 2138, 7573, 6482, 7847, 2937, 633, 7446, 5692, 6625, 8770, 4642, 5182, 219, 7184, 2778, 3394, 7669, 4609, 7391, 7521, 1748, 4607, 7316, 42, 8940, 9736, 8134, 1295, 4917, 1436, 5271, 5877, 3197, 2964, 6141, 4492, 492, 7852, 5890, 1881, 2086, 4918, 718, 624, 9903, 1430, 8709, 8151, 4368, 2387, 6233, 340, 689, 6416, 9230, 4793, 8001, 1605, 5813, 2308, 1540, 6778, 4208, 386, 3477, 415, 8261, 4123, 8236, 1510, 2098, 7194, 6487, 177, 2314, 3064, 843, 5202, 8378, 3572, 7693, 985, 896, 7112, 2894, 6680, 9678, 8440, 6320, 4750, 741, 3876, 656, 9834, 6335, 1166, 183, 9249, 9922, 8308, 4868, 6604, 1245, 31, 79, 9451, 4052, 4096, 6467, 2596, 1566, 8059, 4285, 1615, 4557, 1011, 9949, 5244, 756, 1163, 6958, 3745, 1063, 8287, 5958, 7786, 7496, 2858, 5400, 2178, 2237, 231, 9485, 7948, 7472, 3097, 3807, 8094, 1454, 4884, 7356, 4139, 1981, 1706, 2416, 834, 5035, 4948, 9690, 5195, 4984, 5704, 1101, 9920, 606, 1115, 1975, 1665, 3396, 9439, 594, 5821, 6006, 836, 2450, 815, 8809, 3130, 3434, 9184, 9437, 7241, 7883, 2637, 4807, 8179, 6405, 4647, 5705, 708, 1125, 8984, 745, 6920, 2252, 1307, 6489, 9020, 6693, 6618, 8893, 2753, 1081, 121, 8382, 9923, 6997, 5302, 6294, 9839, 1454, 175, 6098, 4870, 9260, 4562, 9356, 115, 8020, 7208, 5428, 5259, 1367, 7702, 9374, 9302, 3784, 6313, 8077, 7989, 2486, 5270, 2610, 8267};
        int[] B = new int[]{1949, 2492, 1215, 4925, 351, 128, 866, 2185, 756, 6250, 3138, 6717, 3964, 1116, 56, 3027, 1863, 126, 6355, 1516, 1237, 232, 1, 6660, 499, 585, 5831, 3206, 3879, 5897, 286, 67, 2692, 79, 986, 7, 5500, 4356, 4455, 1826, 1188, 1635, 1215, 19, 2414, 807, 3635, 1740, 988, 249, 6419, 6679, 424, 2780, 442, 3606, 122, 673, 635, 5959, 4648, 1090, 1098, 2421, 1688, 145, 1001, 288, 2958, 2646, 69, 1139, 3109, 822, 2621, 7071, 6816, 3068, 6671, 679, 3867, 805, 533, 389, 666, 6865, 486, 4137, 2081, 1352, 7496, 54, 2365, 5289, 388, 4079, 541, 1529, 1877, 7629, 670, 2598, 1478, 1140, 1248, 188, 903, 2933, 369, 7497, 87, 557, 1581, 2527, 3390, 2912, 193, 309, 2457, 3281, 2865, 1449, 216, 1074, 1268, 1168, 7006, 3900, 717, 3498, 66, 8221, 1915, 295, 289, 144, 1548, 1539, 1906, 1723, 314, 60, 342, 2478, 3358, 5161, 1109, 459, 710, 2705, 4488, 491, 947, 8008, 354, 968, 3438, 1512, 6674, 6950, 8289, 8153, 2002, 388, 4647, 748, 325, 1561, 4709, 462, 1414, 7974, 3411, 568, 35, 3848, 4891, 7089, 4778, 1812, 46, 7369, 3068, 1835, 4018, 2230, 1315, 3872, 1297, 1059, 963, 3884, 1659, 5177, 654, 3317, 7748, 758, 3429, 5908, 4556, 2512, 415, 2898, 2678, 2718, 5551, 972, 2514, 5633, 4798, 3704, 7634, 829, 1831, 64, 1193, 475, 4974, 129, 2847, 3809, 3834, 4937, 1468, 265, 3787, 1076, 1037, 3105, 2412, 473, 1549, 466, 527, 3255, 4078, 960, 4373, 3055, 955, 2788, 1698, 361, 1415, 1866, 1484, 758, 361, 4326, 4086, 109, 1629, 302, 641, 5697, 566, 389, 787, 16, 564, 1391, 913, 5398, 341, 54, 1468, 125, 104, 7401, 3685, 94, 908, 256, 1491, 8366, 1808, 1714, 274, 2415, 8102, 109, 397, 270, 1962, 261, 5057, 2230, 128, 3119, 4305, 1693, 3929, 6308, 1433, 88, 339, 1030, 276, 843, 389, 8861, 409, 6269, 3811, 420, 3761, 660, 1903, 985, 258, 4650, 3054, 199, 2290, 3959, 997, 664, 4863, 2730, 736, 429, 1438, 1802, 120, 2055, 9143, 882, 336, 4369, 748, 732, 760, 1074, 3088, 3273, 3934, 2278, 7123, 1130, 4420, 2254, 1614, 7326, 275, 7110, 2030, 1508, 4317, 7, 662, 5439, 6060, 190, 6514, 2078, 2015, 6832, 346, 2061, 3447, 5372, 1200, 1054, 1123, 3910, 498, 5206, 3530, 264, 1433, 21, 6313, 2508, 2464, 69, 1934, 2264, 3888, 447, 4797, 421, 4954, 1177, 1391, 5760, 1777, 3256, 2033, 3177, 7462, 4694, 892, 528, 202, 306, 1, 270, 2747, 3497, 183, 250, 1281, 8748, 6452, 2768, 96, 426, 1001, 671, 1916, 3649, 40, 8464, 640, 4239, 4747, 316, 4064, 620, 1410, 708, 2864, 8659, 436, 144, 19, 3679, 5055, 3793, 40, 3054, 361, 3075, 1485, 950, 8706, 800, 955, 776, 496, 513, 298, 5603, 2596, 3133, 1677, 3290, 506, 625, 4101, 1649, 5373, 1231, 6531, 213, 1418, 1381, 3170, 7592, 1439, 1878, 33, 397, 530, 2327, 4132, 4817, 1915, 5770, 4203, 2025, 2097, 817, 2030, 27, 390, 1649, 2118, 5419, 548, 6992, 3763, 1547, 2251, 2592, 3886, 752, 709, 1770, 5704, 1292, 447, 448, 2804, 2213, 6154, 9, 3407, 1885, 5309, 3624, 4014, 2774, 590, 2484, 2489, 703, 4392, 529, 2715, 58, 1572, 476, 2431, 4890, 3912, 4860, 3329, 1641, 1311, 3942, 1, 5193, 1333, 3974, 895, 1977, 315, 4958, 2330, 171, 1236, 3108, 1658, 0, 5548, 4863, 31, 1485, 2984, 33, 441, 2936, 902, 7177, 3357, 0, 928, 510, 308, 494, 162, 8990, 840, 6399, 553, 4852, 1848, 1385, 4748, 2491, 230, 898, 234, 7627, 3222, 7706, 805, 193, 4533, 1306, 36, 1471, 2565, 6, 1699, 3893, 1445, 4921, 351, 599, 94, 2554, 5971, 9328, 2077, 4134, 2593, 205, 604, 197, 3231, 1237, 807, 114, 3222, 6258, 3961, 2756, 5819, 160, 18, 47, 7725, 2452, 3106, 2660, 1613, 1452, 7576, 2987, 645, 658, 428, 4240, 852, 60, 277, 2235, 681, 1046, 5273, 523, 123, 7483, 2530, 4242, 1272, 911, 189, 6577, 106, 384, 2547, 3781, 2484, 180, 4383, 2485, 2692, 1509, 1114, 1370, 741, 4069, 2948, 4559, 1062, 4088, 5265, 98, 3338, 505, 22, 360, 1151, 3240, 8200, 465, 3299, 5088, 391, 1996, 742, 7232, 3056, 1539, 8427, 7152, 4434, 6660, 2031, 2825, 4695, 1885, 1884, 2255, 173, 304, 4400, 661, 6131, 976, 1114, 5131, 638, 4296, 3636, 386, 1721, 24, 73, 2776, 7464, 384, 3359, 5108, 5667, 1235, 63, 2271, 14, 7562, 4083, 383, 77, 5821, 769, 2809, 2666, 669, 7681, 7326, 2222, 2864, 2168, 6023, 4750, 2343, 4910, 587, 5346};
        int K = 557;
//        System.out.println((double) IntStream.of(B).sum() / (double) IntStream.of(A).sum());
        assertEquals(0.5211413098769007, new GerrymanderEasy().getmax(A, B, K), 1e-9);
    }
}
